def get_coordinates(city, api_key):
    city, api_key, r0, r1, r2, r3, r4 :: str
    r5 :: object[3]
    r6 :: object_ptr
    r7 :: object
    r8, r9, r10 :: str
    r11 :: object
    r12 :: dict
    r13 :: object
    r14 :: str
    r15 :: object
    r16 :: object[2]
    r17 :: object_ptr
    r18, r19 :: object
    r20 :: str
    r21 :: object[1]
    r22 :: object_ptr
    r23 :: object
    r24 :: i32
    r25 :: bit
    r26 :: bool
    r27, r28 :: object
    r29 :: str
    r30, r31, r32 :: object
    r33 :: str
    r34 :: object
    r35 :: tuple[object, object]
    r36, r37 :: union[float, None]
    r38 :: tuple[union[float, None], union[float, None]]
    r39 :: tuple[None, None]
    r40, r41 :: object
    r42 :: tuple[object, object]
    r43 :: tuple[union[float, None], union[float, None]]
L0:
    r0 = 'http://api.openweathermap.org/geo/1.0/direct'
    inc_ref r0
    r1 = 'q'
    r2 = '{:{}}'
    r3 = ''
    r4 = 'format'
    r5 = [r2, city, r3]
    r6 = load_address r5
    r7 = PyObject_VectorcallMethod(r4, r6, 9223372036854775811, 0)
    if is_error(r7) goto L17 (error at get_coordinates:7) else goto L1
L1:
    r8 = cast(str, r7)
    if is_error(r8) goto L17 (error at get_coordinates:7) else goto L2
L2:
    r9 = 'limit'
    r10 = 'appid'
    r11 = object 1
    r12 = CPyDict_Build(3, r1, r8, r9, r11, r10, api_key)
    dec_ref r8
    if is_error(r12) goto L17 (error at get_coordinates:7) else goto L3
L3:
    r13 = requests :: module
    r14 = 'get'
    r15 = CPyObject_GetAttr(r13, r14)
    if is_error(r15) goto L18 (error at get_coordinates:8) else goto L4
L4:
    r16 = [r0, r12]
    r17 = load_address r16
    r18 = ('params',)
    r19 = _PyObject_Vectorcall(r15, r17, 1, r18)
    dec_ref r15
    if is_error(r19) goto L18 (error at get_coordinates:8) else goto L5
L5:
    dec_ref r0
    dec_ref r12
    r20 = 'json'
    r21 = [r19]
    r22 = load_address r21
    r23 = PyObject_VectorcallMethod(r20, r22, 9223372036854775809, 0)
    if is_error(r23) goto L19 (error at get_coordinates:9) else goto L6
L6:
    dec_ref r19
    inc_ref r23
    r24 = PyObject_IsTrue(r23)
    dec_ref r23
    r25 = r24 >= 0 :: signed
    if not r25 goto L20 (error at get_coordinates:9) else goto L7 :: bool
L7:
    r26 = truncate r24: i32 to builtins.bool
    if r26 goto L8 else goto L21 :: bool
L8:
    r27 = object 0
    r28 = PyObject_GetItem(r23, r27)
    if is_error(r28) goto L20 (error at get_coordinates:10) else goto L9
L9:
    r29 = 'lat'
    r30 = PyObject_GetItem(r28, r29)
    dec_ref r28
    if is_error(r30) goto L20 (error at get_coordinates:10) else goto L10
L10:
    r31 = object 0
    r32 = PyObject_GetItem(r23, r31)
    dec_ref r23
    if is_error(r32) goto L22 (error at get_coordinates:10) else goto L11
L11:
    r33 = 'lon'
    r34 = PyObject_GetItem(r32, r33)
    dec_ref r32
    if is_error(r34) goto L22 (error at get_coordinates:10) else goto L12
L12:
    inc_ref r30
    inc_ref r34
    r35 = (r30, r34)
    dec_ref r35
    r36 = cast(union[float, None], r30)
    if is_error(r36) goto L23 (error at get_coordinates:10) else goto L13
L13:
    r37 = cast(union[float, None], r34)
    if is_error(r37) goto L24 (error at get_coordinates:10) else goto L14
L14:
    r38 = (r36, r37)
    return r38
L15:
    r39 = (1, 1)
    r40 = box(None, 1)
    r41 = box(None, 1)
    inc_ref r40
    inc_ref r41
    r42 = (r40, r41)
    return r42
L16:
    r43 = <error> :: tuple[union[float, None], union[float, None]]
    return r43
L17:
    dec_ref r0
    goto L16
L18:
    dec_ref r0
    dec_ref r12
    goto L16
L19:
    dec_ref r19
    goto L16
L20:
    dec_ref r23
    goto L16
L21:
    dec_ref r23
    goto L15
L22:
    dec_ref r30
    goto L16
L23:
    dec_ref r34
    goto L16
L24:
    dec_ref r36
    goto L16

def get_weather(lat, lon, api_key):
    lat, lon :: float
    api_key, r0, r1, r2, r3, r4, r5 :: str
    r6, r7 :: object
    r8 :: dict
    r9 :: object
    r10 :: str
    r11 :: object
    r12 :: object[2]
    r13 :: object_ptr
    r14, r15 :: object
    r16 :: str
    r17 :: object[1]
    r18 :: object_ptr
    r19, r20 :: object
L0:
    r0 = 'http://api.openweathermap.org/data/2.5/weather'
    inc_ref r0
    r1 = 'lat'
    r2 = 'lon'
    r3 = 'appid'
    r4 = 'units'
    r5 = 'metric'
    r6 = box(float, lat)
    r7 = box(float, lon)
    r8 = CPyDict_Build(4, r1, r6, r2, r7, r3, api_key, r4, r5)
    dec_ref r6
    dec_ref r7
    if is_error(r8) goto L6 (error at get_weather:17) else goto L1
L1:
    r9 = requests :: module
    r10 = 'get'
    r11 = CPyObject_GetAttr(r9, r10)
    if is_error(r11) goto L7 (error at get_weather:23) else goto L2
L2:
    r12 = [r0, r8]
    r13 = load_address r12
    r14 = ('params',)
    r15 = _PyObject_Vectorcall(r11, r13, 1, r14)
    dec_ref r11
    if is_error(r15) goto L7 (error at get_weather:23) else goto L3
L3:
    dec_ref r0
    dec_ref r8
    r16 = 'json'
    r17 = [r15]
    r18 = load_address r17
    r19 = PyObject_VectorcallMethod(r16, r18, 9223372036854775809, 0)
    if is_error(r19) goto L8 (error at get_weather:24) else goto L4
L4:
    dec_ref r15
    return r19
L5:
    r20 = <error> :: object
    return r20
L6:
    dec_ref r0
    goto L5
L7:
    dec_ref r0
    dec_ref r8
    goto L5
L8:
    dec_ref r15
    goto L5

def determine_emojis(weather_data):
    weather_data :: dict
    r0 :: str
    r1 :: object
    r2 :: float
    r3 :: bit
    r4 :: str
    r5, r6 :: object
    r7 :: float
    r8 :: bit
    r9 :: str
    r10, r11 :: object
    r12 :: float
    r13, r14 :: bit
    r15 :: object
    r16, feels_like_emoji :: str
    r17 :: bit
    r18, r19 :: str
    r20 :: bit
    r21, r22, r23, humidity_emoji :: str
    r24 :: bit
    r25, temp_emoji :: str
    r26 :: bit
    r27 :: str
    r28 :: bit
    r29, r30 :: str
    r31, r32 :: tuple[str, str, str]
L0:
    r0 = 'feels_like'
    r1 = CPyDict_GetItem(weather_data, r0)
    if is_error(r1) goto L25 (error at determine_emojis:29) else goto L1
L1:
    r2 = unbox(float, r1)
    dec_ref r1
    r3 = r2 == -113.0
    if r3 goto L3 else goto L2 :: bool
L2:
    r4 = 'humidity'
    r5 = CPyDict_GetItem(weather_data, r4)
    if is_error(r5) goto L25 (error at determine_emojis:30) else goto L4
L3:
    r6 = PyErr_Occurred()
    if not is_error(r6) goto L25 (error at determine_emojis:29) else goto L2
L4:
    r7 = unbox(float, r5)
    dec_ref r5
    r8 = r7 == -113.0
    if r8 goto L6 else goto L5 :: bool
L5:
    r9 = 'temp'
    r10 = CPyDict_GetItem(weather_data, r9)
    if is_error(r10) goto L25 (error at determine_emojis:31) else goto L7
L6:
    r11 = PyErr_Occurred()
    if not is_error(r11) goto L25 (error at determine_emojis:30) else goto L5
L7:
    r12 = unbox(float, r10)
    dec_ref r10
    r13 = r12 == -113.0
    if r13 goto L9 else goto L8 :: bool
L8:
    r14 = r2 >= 30.0
    if r14 goto L10 else goto L11 :: bool
L9:
    r15 = PyErr_Occurred()
    if not is_error(r15) goto L25 (error at determine_emojis:31) else goto L8
L10:
    r16 = '‚òÄÔ∏è'
    inc_ref r16
    feels_like_emoji = r16
    goto L14
L11:
    r17 = r2 >= 20.0
    if r17 goto L12 else goto L13 :: bool
L12:
    r18 = '‚òÅÔ∏è'
    inc_ref r18
    feels_like_emoji = r18
    goto L14
L13:
    r19 = '‚ùÑÔ∏è'
    inc_ref r19
    feels_like_emoji = r19
L14:
    r20 = r7 >= 70.0
    if r20 goto L15 else goto L16 :: bool
L15:
    r21 = 'üí¶'
    inc_ref r21
    r22 = r21
    goto L17
L16:
    r23 = 'üíß'
    inc_ref r23
    r22 = r23
L17:
    humidity_emoji = r22
    r24 = r12 >= 30.0
    if r24 goto L18 else goto L19 :: bool
L18:
    r25 = 'üî•'
    inc_ref r25
    temp_emoji = r25
    goto L24
L19:
    r26 = r12 >= 20.0
    if r26 goto L20 else goto L21 :: bool
L20:
    r27 = '‚òÄÔ∏è'
    inc_ref r27
    temp_emoji = r27
    goto L24
L21:
    r28 = r12 >= 10.0
    if r28 goto L22 else goto L23 :: bool
L22:
    r29 = 'üå°Ô∏è'
    inc_ref r29
    temp_emoji = r29
    goto L24
L23:
    r30 = '‚ùÑÔ∏è'
    inc_ref r30
    temp_emoji = r30
L24:
    r31 = (feels_like_emoji, humidity_emoji, temp_emoji)
    return r31
L25:
    r32 = <error> :: tuple[str, str, str]
    return r32

def main():
    r0, r1 :: str
    r2 :: object
    r3 :: str
    r4 :: object
    r5 :: object[1]
    r6 :: object_ptr
    r7 :: object
    r8 :: str
    r9 :: tuple[union[float, None], union[float, None]]
    r10, r11, r12, r13 :: union[float, None]
    r14 :: object
    r15 :: bit
    r16 :: float
    r17, r18 :: bit
    r19, r20 :: object
    r21 :: bit
    r22 :: float
    r23, r24 :: bit
    r25 :: object
    r26 :: float
    r27 :: bit
    r28 :: float
    r29 :: bit
    r30, r31, r32 :: object
    r33 :: None
    r34 :: object
    r35 :: str
    r36 :: object
    r37 :: str
    r38 :: object
    r39 :: object[1]
    r40 :: object_ptr
    r41 :: object
    r42 :: None
L0:
    r0 = '6686d8ea951a043615db0329e612361a'
    inc_ref r0
    r1 = 'Enter city name: '
    r2 = builtins :: module
    r3 = 'input'
    r4 = CPyObject_GetAttr(r2, r3)
    if is_error(r4) goto L21 (error at main:59) else goto L1
L1:
    r5 = [r1]
    r6 = load_address r5
    r7 = _PyObject_Vectorcall(r4, r6, 1, 0)
    dec_ref r4
    if is_error(r7) goto L21 (error at main:59) else goto L2
L2:
    r8 = cast(str, r7)
    if is_error(r8) goto L21 (error at main:59) else goto L3
L3:
    r9 = get_coordinates(r8, r0)
    dec_ref r8
    if is_error(r9) goto L21 (error at main:60) else goto L4
L4:
    r10 = borrow r9[0]
    r11 = unborrow r10
    r12 = borrow r9[1]
    r13 = unborrow r12
    r14 = load_address _Py_NoneStruct
    r15 = r11 != r14
    if r15 goto L5 else goto L22 :: bool
L5:
    r16 = unbox(float, r11)
    r17 = r16 == -113.0
    if r17 goto L7 else goto L6 :: bool
L6:
    r18 = r16 != 0.0
    if r18 goto L8 else goto L22 :: bool
L7:
    r19 = PyErr_Occurred()
    if not is_error(r19) goto L23 (error at main:60) else goto L6
L8:
    r20 = load_address _Py_NoneStruct
    r21 = r13 != r20
    if r21 goto L9 else goto L22 :: bool
L9:
    r22 = unbox(float, r13)
    r23 = r22 == -113.0
    if r23 goto L11 else goto L10 :: bool
L10:
    r24 = r22 != 0.0
    if r24 goto L12 else goto L22 :: bool
L11:
    r25 = PyErr_Occurred()
    if not is_error(r25) goto L23 (error at main:60) else goto L10
L12:
    r26 = unbox(float, r11)
    dec_ref r11
    r27 = r26 == -113.0
    if r27 goto L14 else goto L13 :: bool
L13:
    r28 = unbox(float, r13)
    dec_ref r13
    r29 = r28 == -113.0
    if r29 goto L16 else goto L15 :: bool
L14:
    r30 = PyErr_Occurred()
    if not is_error(r30) goto L24 (error at main:62) else goto L13
L15:
    r31 = box(float, r26)
    r32 = box(float, r28)
    r33 = display_weather(r31, r32, r0)
    dec_ref r31
    dec_ref r32
    dec_ref r0
    if is_error(r33) goto L20 (error at main:62) else goto L19
L16:
    r34 = PyErr_Occurred()
    if not is_error(r34) goto L21 (error at main:62) else goto L15
L17:
    r35 = 'City not found.'
    r36 = builtins :: module
    r37 = 'print'
    r38 = CPyObject_GetAttr(r36, r37)
    if is_error(r38) goto L20 (error at main:64) else goto L18
L18:
    r39 = [r35]
    r40 = load_address r39
    r41 = _PyObject_Vectorcall(r38, r40, 1, 0)
    dec_ref r38
    if is_error(r41) goto L20 (error at main:64) else goto L25
L19:
    return 1
L20:
    r42 = <error> :: None
    return r42
L21:
    dec_ref r0
    goto L20
L22:
    dec_ref r0
    dec_ref r11
    dec_ref r13
    goto L17
L23:
    dec_ref r0
    dec_ref r11
    dec_ref r13
    goto L20
L24:
    dec_ref r0
    dec_ref r13
    goto L20
L25:
    dec_ref r41
    goto L19

def display_weather(lat, lon, api_key):
    lat, lon, api_key :: object
    r0 :: float
    r1 :: bit
    r2 :: float
    r3 :: bit
    r4 :: object
    r5 :: str
    r6, r7 :: object
    r8 :: str
    r9 :: object
    r10 :: dict
    r11 :: tuple[str, str, str]
    r12, r13, r14, r15, r16, r17, r18, r19 :: str
    r20 :: object
    r21 :: float
    r22 :: bit
    r23 :: object
    r24 :: str
    r25 :: object
    r26, r27 :: str
    r28 :: object
    r29 :: str
    r30 :: object
    r31 :: object[1]
    r32 :: object_ptr
    r33 :: object
    r34, r35 :: str
    r36 :: object
    r37 :: float
    r38 :: bit
    r39 :: object
    r40 :: str
    r41 :: object
    r42, r43 :: str
    r44 :: object
    r45 :: str
    r46 :: object
    r47 :: object[1]
    r48 :: object_ptr
    r49 :: object
    r50, r51 :: str
    r52 :: object
    r53 :: float
    r54 :: bit
    r55 :: object
    r56 :: str
    r57 :: object
    r58, r59 :: str
    r60 :: object
    r61 :: str
    r62 :: object
    r63 :: object[1]
    r64 :: object_ptr
    r65 :: object
    r66, r67 :: str
    r68 :: object
    r69 :: float
    r70 :: bit
    r71 :: object
    r72 :: str
    r73, r74, r75 :: object
    r76 :: object[2]
    r77 :: object_ptr
    r78 :: object
    r79, r80 :: str
    r81 :: object
    r82 :: float
    r83 :: bit
    r84 :: object
    r85 :: str
    r86, r87, r88 :: object
    r89 :: object[2]
    r90 :: object_ptr
    r91 :: object
    r92 :: None
L0:
    r0 = unbox(float, lat)
    r1 = r0 == -113.0
    if r1 goto L2 else goto L1 :: bool
L1:
    r2 = unbox(float, lon)
    r3 = r2 == -113.0
    if r3 goto L4 else goto L3 :: bool
L2:
    r4 = PyErr_Occurred()
    if not is_error(r4) goto L41 (error at display_weather:68) else goto L1
L3:
    inc_ref api_key
    r5 = cast(str, api_key)
    if is_error(r5) goto L41 (error at display_weather:68) else goto L5
L4:
    r6 = PyErr_Occurred()
    if not is_error(r6) goto L41 (error at display_weather:68) else goto L3
L5:
    r7 = get_weather(r0, r2, r5)
    dec_ref r5
    if is_error(r7) goto L41 (error at display_weather:68) else goto L6
L6:
    r8 = 'main'
    r9 = PyObject_GetItem(r7, r8)
    dec_ref r7
    if is_error(r9) goto L41 (error at display_weather:68) else goto L7
L7:
    r10 = cast(dict, r9)
    if is_error(r10) goto L41 (error at display_weather:68) else goto L8
L8:
    r11 = determine_emojis(r10)
    if is_error(r11) goto L42 (error at display_weather:69) else goto L9
L9:
    r12 = borrow r11[0]
    r13 = unborrow r12
    r14 = borrow r11[1]
    r15 = unborrow r14
    r16 = borrow r11[2]
    r17 = unborrow r16
    r18 = 'Feels like: '
    r19 = 'feels_like'
    r20 = CPyDict_GetItem(r10, r19)
    if is_error(r20) goto L43 (error at display_weather:70) else goto L10
L10:
    r21 = unbox(float, r20)
    dec_ref r20
    r22 = r21 == -113.0
    if r22 goto L12 else goto L11 :: bool
L11:
    r23 = box(float, r21)
    r24 = PyObject_Str(r23)
    dec_ref r23
    if is_error(r24) goto L43 (error at display_weather:70) else goto L13
L12:
    r25 = PyErr_Occurred()
    if not is_error(r25) goto L43 (error at display_weather:70) else goto L11
L13:
    r26 = '¬∞ '
    r27 = CPyStr_Build(4, r18, r24, r26, r13)
    dec_ref r24
    dec_ref r13
    if is_error(r27) goto L44 (error at display_weather:70) else goto L14
L14:
    r28 = builtins :: module
    r29 = 'print'
    r30 = CPyObject_GetAttr(r28, r29)
    if is_error(r30) goto L45 (error at display_weather:70) else goto L15
L15:
    r31 = [r27]
    r32 = load_address r31
    r33 = _PyObject_Vectorcall(r30, r32, 1, 0)
    dec_ref r30
    if is_error(r33) goto L45 (error at display_weather:70) else goto L46
L16:
    dec_ref r27
    r34 = 'Humidity: '
    r35 = 'humidity'
    r36 = CPyDict_GetItem(r10, r35)
    if is_error(r36) goto L44 (error at display_weather:71) else goto L17
L17:
    r37 = unbox(float, r36)
    dec_ref r36
    r38 = r37 == -113.0
    if r38 goto L19 else goto L18 :: bool
L18:
    r39 = box(float, r37)
    r40 = PyObject_Str(r39)
    dec_ref r39
    if is_error(r40) goto L44 (error at display_weather:71) else goto L20
L19:
    r41 = PyErr_Occurred()
    if not is_error(r41) goto L44 (error at display_weather:71) else goto L18
L20:
    r42 = '% '
    r43 = CPyStr_Build(4, r34, r40, r42, r15)
    dec_ref r40
    dec_ref r15
    if is_error(r43) goto L47 (error at display_weather:71) else goto L21
L21:
    r44 = builtins :: module
    r45 = 'print'
    r46 = CPyObject_GetAttr(r44, r45)
    if is_error(r46) goto L48 (error at display_weather:71) else goto L22
L22:
    r47 = [r43]
    r48 = load_address r47
    r49 = _PyObject_Vectorcall(r46, r48, 1, 0)
    dec_ref r46
    if is_error(r49) goto L48 (error at display_weather:71) else goto L49
L23:
    dec_ref r43
    r50 = 'Temperature: '
    r51 = 'temp'
    r52 = CPyDict_GetItem(r10, r51)
    if is_error(r52) goto L47 (error at display_weather:72) else goto L24
L24:
    r53 = unbox(float, r52)
    dec_ref r52
    r54 = r53 == -113.0
    if r54 goto L26 else goto L25 :: bool
L25:
    r55 = box(float, r53)
    r56 = PyObject_Str(r55)
    dec_ref r55
    if is_error(r56) goto L47 (error at display_weather:72) else goto L27
L26:
    r57 = PyErr_Occurred()
    if not is_error(r57) goto L47 (error at display_weather:72) else goto L25
L27:
    r58 = '¬∞ '
    r59 = CPyStr_Build(4, r50, r56, r58, r17)
    dec_ref r56
    dec_ref r17
    if is_error(r59) goto L42 (error at display_weather:72) else goto L28
L28:
    r60 = builtins :: module
    r61 = 'print'
    r62 = CPyObject_GetAttr(r60, r61)
    if is_error(r62) goto L50 (error at display_weather:72) else goto L29
L29:
    r63 = [r59]
    r64 = load_address r63
    r65 = _PyObject_Vectorcall(r62, r64, 1, 0)
    dec_ref r62
    if is_error(r65) goto L50 (error at display_weather:72) else goto L51
L30:
    dec_ref r59
    r66 = 'Temperature min:'
    r67 = 'temp_min'
    r68 = CPyDict_GetItem(r10, r67)
    if is_error(r68) goto L42 (error at display_weather:73) else goto L31
L31:
    r69 = unbox(float, r68)
    dec_ref r68
    r70 = r69 == -113.0
    if r70 goto L33 else goto L32 :: bool
L32:
    r71 = builtins :: module
    r72 = 'print'
    r73 = CPyObject_GetAttr(r71, r72)
    if is_error(r73) goto L42 (error at display_weather:73) else goto L34
L33:
    r74 = PyErr_Occurred()
    if not is_error(r74) goto L42 (error at display_weather:73) else goto L32
L34:
    r75 = box(float, r69)
    r76 = [r66, r75]
    r77 = load_address r76
    r78 = _PyObject_Vectorcall(r73, r77, 2, 0)
    dec_ref r73
    if is_error(r78) goto L52 (error at display_weather:73) else goto L53
L35:
    dec_ref r75
    r79 = 'Temperature max:'
    r80 = 'temp_max'
    r81 = CPyDict_GetItem(r10, r80)
    dec_ref r10
    if is_error(r81) goto L41 (error at display_weather:74) else goto L36
L36:
    r82 = unbox(float, r81)
    dec_ref r81
    r83 = r82 == -113.0
    if r83 goto L38 else goto L37 :: bool
L37:
    r84 = builtins :: module
    r85 = 'print'
    r86 = CPyObject_GetAttr(r84, r85)
    if is_error(r86) goto L41 (error at display_weather:74) else goto L39
L38:
    r87 = PyErr_Occurred()
    if not is_error(r87) goto L41 (error at display_weather:74) else goto L37
L39:
    r88 = box(float, r82)
    r89 = [r79, r88]
    r90 = load_address r89
    r91 = _PyObject_Vectorcall(r86, r90, 2, 0)
    dec_ref r86
    if is_error(r91) goto L54 (error at display_weather:74) else goto L55
L40:
    dec_ref r88
    return 1
L41:
    r92 = <error> :: None
    return r92
L42:
    dec_ref r10
    goto L41
L43:
    dec_ref r10
    dec_ref r13
    dec_ref r15
    dec_ref r17
    goto L41
L44:
    dec_ref r10
    dec_ref r15
    dec_ref r17
    goto L41
L45:
    dec_ref r10
    dec_ref r15
    dec_ref r17
    dec_ref r27
    goto L41
L46:
    dec_ref r33
    goto L16
L47:
    dec_ref r10
    dec_ref r17
    goto L41
L48:
    dec_ref r10
    dec_ref r17
    dec_ref r43
    goto L41
L49:
    dec_ref r49
    goto L23
L50:
    dec_ref r10
    dec_ref r59
    goto L41
L51:
    dec_ref r65
    goto L30
L52:
    dec_ref r10
    dec_ref r75
    goto L41
L53:
    dec_ref r78
    goto L35
L54:
    dec_ref r88
    goto L41
L55:
    dec_ref r91
    goto L40

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4, r5 :: object
    r6 :: str
    r7 :: dict
    r8 :: object
    r9 :: object_ptr
    r10 :: object_ptr[1]
    r11 :: c_ptr
    r12 :: native_int[1]
    r13 :: c_ptr
    r14 :: object
    r15 :: dict
    r16, r17 :: str
    r18 :: bit
    r19, r20 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L7 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = ('Any',)
    r6 = 'typing'
    r7 = main.globals :: static
    r8 = CPyImport_ImportFromMany(r6, r5, r5, r7)
    if is_error(r8) goto L7 (error at <module>:1) else goto L4
L4:
    typing = r8 :: module
    dec_ref r8
    r9 = load_address requests :: module
    r10 = [r9]
    r11 = load_address r10
    r12 = [2]
    r13 = load_address r12
    r14 = (('requests', 'requests', 'requests'),)
    r15 = main.globals :: static
    r16 = 'main.py'
    r17 = '<module>'
    r18 = CPyImport_ImportMany(r14, r11, r15, r16, r17, r13)
    if not r18 goto L7 else goto L5 :: bool
L5:
    r19 = main()
    if is_error(r19) goto L7 (error at <module>:77) else goto L6
L6:
    return 1
L7:
    r20 = <error> :: None
    return r20
