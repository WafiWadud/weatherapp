def get_coordinates(city, api_key):
    city, api_key, r0, base_url, r1, r2, r3, r4 :: str
    r5 :: object[3]
    r6 :: object_ptr
    r7 :: object
    r8, r9, r10 :: str
    r11 :: object
    r12, params :: dict
    r13 :: object
    r14 :: str
    r15 :: object
    r16 :: object[2]
    r17 :: object_ptr
    r18, r19, response :: object
    r20 :: str
    r21 :: object[1]
    r22 :: object_ptr
    r23, data :: object
    r24 :: i32
    r25 :: bit
    r26 :: bool
    r27, r28 :: object
    r29 :: str
    r30, r31, r32 :: object
    r33 :: str
    r34 :: object
    r35 :: tuple[object, object]
    r36, r37 :: union[float, None]
    r38 :: tuple[union[float, None], union[float, None]]
    r39 :: tuple[None, None]
    r40, r41 :: object
    r42 :: tuple[object, object]
    r43 :: tuple[union[float, None], union[float, None]]
L0:
    r0 = 'http://api.openweathermap.org/geo/1.0/direct'
    inc_ref r0
    base_url = r0
    r1 = 'q'
    r2 = '{:{}}'
    r3 = ''
    r4 = 'format'
    r5 = [r2, city, r3]
    r6 = load_address r5
    r7 = PyObject_VectorcallMethod(r4, r6, 9223372036854775811, 0)
    if is_error(r7) goto L17 (error at get_coordinates:7) else goto L1
L1:
    r8 = cast(str, r7)
    if is_error(r8) goto L17 (error at get_coordinates:7) else goto L2
L2:
    r9 = 'limit'
    r10 = 'appid'
    r11 = object 1
    r12 = CPyDict_Build(3, r1, r8, r9, r11, r10, api_key)
    dec_ref r8
    if is_error(r12) goto L17 (error at get_coordinates:7) else goto L3
L3:
    params = r12
    r13 = requests :: module
    r14 = 'get'
    r15 = CPyObject_GetAttr(r13, r14)
    if is_error(r15) goto L18 (error at get_coordinates:8) else goto L4
L4:
    r16 = [base_url, params]
    r17 = load_address r16
    r18 = ('params',)
    r19 = _PyObject_Vectorcall(r15, r17, 1, r18)
    dec_ref r15
    if is_error(r19) goto L18 (error at get_coordinates:8) else goto L5
L5:
    dec_ref base_url
    dec_ref params
    response = r19
    r20 = 'json'
    r21 = [response]
    r22 = load_address r21
    r23 = PyObject_VectorcallMethod(r20, r22, 9223372036854775809, 0)
    if is_error(r23) goto L19 (error at get_coordinates:9) else goto L6
L6:
    dec_ref response
    data = r23
    r24 = PyObject_IsTrue(data)
    r25 = r24 >= 0 :: signed
    if not r25 goto L20 (error at get_coordinates:9) else goto L7 :: bool
L7:
    r26 = truncate r24: i32 to builtins.bool
    if r26 goto L8 else goto L21 :: bool
L8:
    r27 = object 0
    r28 = PyObject_GetItem(data, r27)
    if is_error(r28) goto L20 (error at get_coordinates:11) else goto L9
L9:
    r29 = 'lat'
    r30 = PyObject_GetItem(r28, r29)
    dec_ref r28
    if is_error(r30) goto L20 (error at get_coordinates:11) else goto L10
L10:
    r31 = object 0
    r32 = PyObject_GetItem(data, r31)
    dec_ref data
    if is_error(r32) goto L22 (error at get_coordinates:11) else goto L11
L11:
    r33 = 'lon'
    r34 = PyObject_GetItem(r32, r33)
    dec_ref r32
    if is_error(r34) goto L22 (error at get_coordinates:11) else goto L12
L12:
    inc_ref r30
    inc_ref r34
    r35 = (r30, r34)
    dec_ref r35
    r36 = cast(union[float, None], r30)
    if is_error(r36) goto L23 (error at get_coordinates:11) else goto L13
L13:
    r37 = cast(union[float, None], r34)
    if is_error(r37) goto L24 (error at get_coordinates:11) else goto L14
L14:
    r38 = (r36, r37)
    return r38
L15:
    r39 = (1, 1)
    r40 = box(None, 1)
    r41 = box(None, 1)
    inc_ref r40
    inc_ref r41
    r42 = (r40, r41)
    return r42
L16:
    r43 = <error> :: tuple[union[float, None], union[float, None]]
    return r43
L17:
    dec_ref base_url
    goto L16
L18:
    dec_ref base_url
    dec_ref params
    goto L16
L19:
    dec_ref response
    goto L16
L20:
    dec_ref data
    goto L16
L21:
    dec_ref data
    goto L15
L22:
    dec_ref r30
    goto L16
L23:
    dec_ref r34
    goto L16
L24:
    dec_ref r36
    goto L16

def get_weather(lat, lon, api_key):
    lat, lon :: float
    api_key, r0, base_url, r1, r2, r3, r4, r5 :: str
    r6, r7 :: object
    r8, params :: dict
    r9 :: object
    r10 :: str
    r11 :: object
    r12 :: object[2]
    r13 :: object_ptr
    r14, r15, response :: object
    r16 :: str
    r17 :: object[1]
    r18 :: object_ptr
    r19, data, r20 :: object
L0:
    r0 = 'http://api.openweathermap.org/data/2.5/weather'
    inc_ref r0
    base_url = r0
    r1 = 'lat'
    r2 = 'lon'
    r3 = 'appid'
    r4 = 'units'
    r5 = 'metric'
    r6 = box(float, lat)
    r7 = box(float, lon)
    r8 = CPyDict_Build(4, r1, r6, r2, r7, r3, api_key, r4, r5)
    dec_ref r6
    dec_ref r7
    if is_error(r8) goto L6 (error at get_weather:18) else goto L1
L1:
    params = r8
    r9 = requests :: module
    r10 = 'get'
    r11 = CPyObject_GetAttr(r9, r10)
    if is_error(r11) goto L7 (error at get_weather:24) else goto L2
L2:
    r12 = [base_url, params]
    r13 = load_address r12
    r14 = ('params',)
    r15 = _PyObject_Vectorcall(r11, r13, 1, r14)
    dec_ref r11
    if is_error(r15) goto L7 (error at get_weather:24) else goto L3
L3:
    dec_ref base_url
    dec_ref params
    response = r15
    r16 = 'json'
    r17 = [response]
    r18 = load_address r17
    r19 = PyObject_VectorcallMethod(r16, r18, 9223372036854775809, 0)
    if is_error(r19) goto L8 (error at get_weather:25) else goto L4
L4:
    dec_ref response
    data = r19
    return data
L5:
    r20 = <error> :: object
    return r20
L6:
    dec_ref base_url
    goto L5
L7:
    dec_ref base_url
    dec_ref params
    goto L5
L8:
    dec_ref response
    goto L5

def determine_emojis(weather_data):
    weather_data :: dict
    r0 :: str
    r1 :: object
    r2 :: float
    r3 :: bit
    feels_like :: float
    r4 :: str
    r5, r6 :: object
    r7 :: float
    r8 :: bit
    humidity :: float
    r9 :: str
    r10, r11 :: object
    r12 :: float
    r13 :: bit
    temp :: float
    r14 :: bit
    r15 :: object
    r16, feels_like_emoji :: str
    r17 :: bit
    r18, r19 :: str
    r20 :: bit
    r21, humidity_emoji, r22 :: str
    r23 :: bit
    r24, temp_emoji :: str
    r25 :: bit
    r26 :: str
    r27 :: bit
    r28 :: str
    r29 :: bit
    r30, r31 :: str
    r32, r33 :: tuple[str, str, str]
L0:
    r0 = 'feels_like'
    r1 = CPyDict_GetItem(weather_data, r0)
    if is_error(r1) goto L27 (error at determine_emojis:30) else goto L1
L1:
    r2 = unbox(float, r1)
    dec_ref r1
    r3 = r2 == -113.0
    if r3 goto L3 else goto L2 :: bool
L2:
    feels_like = r2
    r4 = 'humidity'
    r5 = CPyDict_GetItem(weather_data, r4)
    if is_error(r5) goto L27 (error at determine_emojis:31) else goto L4
L3:
    r6 = PyErr_Occurred()
    if not is_error(r6) goto L27 (error at determine_emojis:30) else goto L2
L4:
    r7 = unbox(float, r5)
    dec_ref r5
    r8 = r7 == -113.0
    if r8 goto L6 else goto L5 :: bool
L5:
    humidity = r7
    r9 = 'temp'
    r10 = CPyDict_GetItem(weather_data, r9)
    if is_error(r10) goto L27 (error at determine_emojis:32) else goto L7
L6:
    r11 = PyErr_Occurred()
    if not is_error(r11) goto L27 (error at determine_emojis:31) else goto L5
L7:
    r12 = unbox(float, r10)
    dec_ref r10
    r13 = r12 == -113.0
    if r13 goto L9 else goto L8 :: bool
L8:
    temp = r12
    r14 = feels_like >= 30.0
    if r14 goto L10 else goto L11 :: bool
L9:
    r15 = PyErr_Occurred()
    if not is_error(r15) goto L27 (error at determine_emojis:32) else goto L8
L10:
    r16 = '‚òÄÔ∏è'
    inc_ref r16
    feels_like_emoji = r16
    goto L14
L11:
    r17 = feels_like >= 20.0
    if r17 goto L12 else goto L13 :: bool
L12:
    r18 = '‚òÅÔ∏è'
    inc_ref r18
    feels_like_emoji = r18
    goto L14
L13:
    r19 = '‚ùÑÔ∏è'
    inc_ref r19
    feels_like_emoji = r19
L14:
    r20 = humidity >= 70.0
    if r20 goto L15 else goto L16 :: bool
L15:
    r21 = 'üí¶'
    inc_ref r21
    humidity_emoji = r21
    goto L17
L16:
    r22 = 'üíß'
    inc_ref r22
    humidity_emoji = r22
L17:
    r23 = temp >= 30.0
    if r23 goto L18 else goto L19 :: bool
L18:
    r24 = 'üî•'
    inc_ref r24
    temp_emoji = r24
    goto L26
L19:
    r25 = temp >= 20.0
    if r25 goto L20 else goto L21 :: bool
L20:
    r26 = '‚òÄÔ∏è'
    inc_ref r26
    temp_emoji = r26
    goto L26
L21:
    r27 = temp >= 10.0
    if r27 goto L22 else goto L23 :: bool
L22:
    r28 = 'üå°Ô∏è'
    inc_ref r28
    temp_emoji = r28
    goto L26
L23:
    r29 = temp >= 0.0
    if r29 goto L24 else goto L25 :: bool
L24:
    r30 = '‚ùÑÔ∏è'
    inc_ref r30
    temp_emoji = r30
    goto L26
L25:
    r31 = '‚ùÑÔ∏è'
    inc_ref r31
    temp_emoji = r31
L26:
    r32 = (feels_like_emoji, humidity_emoji, temp_emoji)
    return r32
L27:
    r33 = <error> :: tuple[str, str, str]
    return r33

def main():
    r0, api_key, r1 :: str
    r2 :: object
    r3 :: str
    r4 :: object
    r5 :: object[1]
    r6 :: object_ptr
    r7 :: object
    r8, city :: str
    r9 :: tuple[union[float, None], union[float, None]]
    r10, r11, lat, r12, r13, lon :: union[float, None]
    r14 :: object
    r15 :: bit
    r16 :: float
    r17, r18 :: bit
    r19, r20 :: object
    r21 :: bit
    r22 :: float
    r23, r24 :: bit
    r25 :: object
    r26 :: float
    r27 :: bit
    r28 :: float
    r29 :: bit
    r30, r31, r32 :: object
    r33 :: str
    r34 :: object
    r35, weather_data :: dict
    r36 :: tuple[str, str, str]
    r37, r38, feels_like_emoji, r39, r40, humidity_emoji, r41, r42, temp_emoji, r43, r44 :: str
    r45 :: object
    r46 :: float
    r47 :: bit
    r48 :: object
    r49 :: str
    r50 :: object
    r51, r52 :: str
    r53 :: object
    r54 :: str
    r55 :: object
    r56 :: object[1]
    r57 :: object_ptr
    r58 :: object
    r59, r60 :: str
    r61 :: object
    r62 :: float
    r63 :: bit
    r64 :: object
    r65 :: str
    r66 :: object
    r67, r68 :: str
    r69 :: object
    r70 :: str
    r71 :: object
    r72 :: object[1]
    r73 :: object_ptr
    r74 :: object
    r75, r76 :: str
    r77 :: object
    r78 :: float
    r79 :: bit
    r80 :: object
    r81 :: str
    r82 :: object
    r83, r84 :: str
    r85 :: object
    r86 :: str
    r87 :: object
    r88 :: object[1]
    r89 :: object_ptr
    r90 :: object
    r91, r92 :: str
    r93 :: object
    r94 :: float
    r95 :: bit
    r96 :: object
    r97 :: str
    r98, r99, r100 :: object
    r101 :: object[2]
    r102 :: object_ptr
    r103 :: object
    r104, r105 :: str
    r106 :: object
    r107 :: float
    r108 :: bit
    r109 :: object
    r110 :: str
    r111, r112, r113 :: object
    r114 :: object[2]
    r115 :: object_ptr
    r116 :: object
    r117 :: str
    r118 :: object
    r119 :: str
    r120 :: object
    r121 :: object[1]
    r122 :: object_ptr
    r123 :: object
    r124 :: None
L0:
    r0 = '6686d8ea951a043615db0329e612361a'
    inc_ref r0
    api_key = r0
    r1 = 'Enter city name: '
    r2 = builtins :: module
    r3 = 'input'
    r4 = CPyObject_GetAttr(r2, r3)
    if is_error(r4) goto L56 (error at main:67) else goto L1
L1:
    r5 = [r1]
    r6 = load_address r5
    r7 = _PyObject_Vectorcall(r4, r6, 1, 0)
    dec_ref r4
    if is_error(r7) goto L56 (error at main:67) else goto L2
L2:
    r8 = cast(str, r7)
    if is_error(r8) goto L56 (error at main:67) else goto L3
L3:
    city = r8
    r9 = get_coordinates(city, api_key)
    dec_ref city
    if is_error(r9) goto L56 (error at main:68) else goto L4
L4:
    r10 = borrow r9[0]
    r11 = unborrow r10
    lat = r11
    r12 = borrow r9[1]
    r13 = unborrow r12
    lon = r13
    r14 = load_address _Py_NoneStruct
    r15 = lat != r14
    if r15 goto L5 else goto L57 :: bool
L5:
    r16 = unbox(float, lat)
    r17 = r16 == -113.0
    if r17 goto L7 else goto L6 :: bool
L6:
    r18 = r16 != 0.0
    if r18 goto L8 else goto L57 :: bool
L7:
    r19 = PyErr_Occurred()
    if not is_error(r19) goto L58 (error at main:68) else goto L6
L8:
    r20 = load_address _Py_NoneStruct
    r21 = lon != r20
    if r21 goto L9 else goto L57 :: bool
L9:
    r22 = unbox(float, lon)
    r23 = r22 == -113.0
    if r23 goto L11 else goto L10 :: bool
L10:
    r24 = r22 != 0.0
    if r24 goto L12 else goto L57 :: bool
L11:
    r25 = PyErr_Occurred()
    if not is_error(r25) goto L58 (error at main:68) else goto L10
L12:
    r26 = unbox(float, lat)
    dec_ref lat
    r27 = r26 == -113.0
    if r27 goto L14 else goto L13 :: bool
L13:
    r28 = unbox(float, lon)
    dec_ref lon
    r29 = r28 == -113.0
    if r29 goto L16 else goto L15 :: bool
L14:
    r30 = PyErr_Occurred()
    if not is_error(r30) goto L59 (error at main:70) else goto L13
L15:
    r31 = get_weather(r26, r28, api_key)
    dec_ref api_key
    if is_error(r31) goto L55 (error at main:70) else goto L17
L16:
    r32 = PyErr_Occurred()
    if not is_error(r32) goto L56 (error at main:70) else goto L15
L17:
    r33 = 'main'
    r34 = PyObject_GetItem(r31, r33)
    dec_ref r31
    if is_error(r34) goto L55 (error at main:70) else goto L18
L18:
    r35 = cast(dict, r34)
    if is_error(r35) goto L55 (error at main:70) else goto L19
L19:
    weather_data = r35
    r36 = determine_emojis(weather_data)
    if is_error(r36) goto L60 (error at main:71) else goto L20
L20:
    r37 = borrow r36[0]
    r38 = unborrow r37
    feels_like_emoji = r38
    r39 = borrow r36[1]
    r40 = unborrow r39
    humidity_emoji = r40
    r41 = borrow r36[2]
    r42 = unborrow r41
    temp_emoji = r42
    r43 = 'Feels like: '
    r44 = 'feels_like'
    r45 = CPyDict_GetItem(weather_data, r44)
    if is_error(r45) goto L61 (error at main:72) else goto L21
L21:
    r46 = unbox(float, r45)
    dec_ref r45
    r47 = r46 == -113.0
    if r47 goto L23 else goto L22 :: bool
L22:
    r48 = box(float, r46)
    r49 = PyObject_Str(r48)
    dec_ref r48
    if is_error(r49) goto L61 (error at main:72) else goto L24
L23:
    r50 = PyErr_Occurred()
    if not is_error(r50) goto L61 (error at main:72) else goto L22
L24:
    r51 = '¬∞ '
    r52 = CPyStr_Build(4, r43, r49, r51, feels_like_emoji)
    dec_ref r49
    dec_ref feels_like_emoji
    if is_error(r52) goto L62 (error at main:72) else goto L25
L25:
    r53 = builtins :: module
    r54 = 'print'
    r55 = CPyObject_GetAttr(r53, r54)
    if is_error(r55) goto L63 (error at main:72) else goto L26
L26:
    r56 = [r52]
    r57 = load_address r56
    r58 = _PyObject_Vectorcall(r55, r57, 1, 0)
    dec_ref r55
    if is_error(r58) goto L63 (error at main:72) else goto L64
L27:
    dec_ref r52
    r59 = 'Humidity: '
    r60 = 'humidity'
    r61 = CPyDict_GetItem(weather_data, r60)
    if is_error(r61) goto L62 (error at main:73) else goto L28
L28:
    r62 = unbox(float, r61)
    dec_ref r61
    r63 = r62 == -113.0
    if r63 goto L30 else goto L29 :: bool
L29:
    r64 = box(float, r62)
    r65 = PyObject_Str(r64)
    dec_ref r64
    if is_error(r65) goto L62 (error at main:73) else goto L31
L30:
    r66 = PyErr_Occurred()
    if not is_error(r66) goto L62 (error at main:73) else goto L29
L31:
    r67 = '% '
    r68 = CPyStr_Build(4, r59, r65, r67, humidity_emoji)
    dec_ref r65
    dec_ref humidity_emoji
    if is_error(r68) goto L65 (error at main:73) else goto L32
L32:
    r69 = builtins :: module
    r70 = 'print'
    r71 = CPyObject_GetAttr(r69, r70)
    if is_error(r71) goto L66 (error at main:73) else goto L33
L33:
    r72 = [r68]
    r73 = load_address r72
    r74 = _PyObject_Vectorcall(r71, r73, 1, 0)
    dec_ref r71
    if is_error(r74) goto L66 (error at main:73) else goto L67
L34:
    dec_ref r68
    r75 = 'Temperature: '
    r76 = 'temp'
    r77 = CPyDict_GetItem(weather_data, r76)
    if is_error(r77) goto L65 (error at main:74) else goto L35
L35:
    r78 = unbox(float, r77)
    dec_ref r77
    r79 = r78 == -113.0
    if r79 goto L37 else goto L36 :: bool
L36:
    r80 = box(float, r78)
    r81 = PyObject_Str(r80)
    dec_ref r80
    if is_error(r81) goto L65 (error at main:74) else goto L38
L37:
    r82 = PyErr_Occurred()
    if not is_error(r82) goto L65 (error at main:74) else goto L36
L38:
    r83 = '¬∞ '
    r84 = CPyStr_Build(4, r75, r81, r83, temp_emoji)
    dec_ref r81
    dec_ref temp_emoji
    if is_error(r84) goto L60 (error at main:74) else goto L39
L39:
    r85 = builtins :: module
    r86 = 'print'
    r87 = CPyObject_GetAttr(r85, r86)
    if is_error(r87) goto L68 (error at main:74) else goto L40
L40:
    r88 = [r84]
    r89 = load_address r88
    r90 = _PyObject_Vectorcall(r87, r89, 1, 0)
    dec_ref r87
    if is_error(r90) goto L68 (error at main:74) else goto L69
L41:
    dec_ref r84
    r91 = 'Temperature min:'
    r92 = 'temp_min'
    r93 = CPyDict_GetItem(weather_data, r92)
    if is_error(r93) goto L60 (error at main:75) else goto L42
L42:
    r94 = unbox(float, r93)
    dec_ref r93
    r95 = r94 == -113.0
    if r95 goto L44 else goto L43 :: bool
L43:
    r96 = builtins :: module
    r97 = 'print'
    r98 = CPyObject_GetAttr(r96, r97)
    if is_error(r98) goto L60 (error at main:75) else goto L45
L44:
    r99 = PyErr_Occurred()
    if not is_error(r99) goto L60 (error at main:75) else goto L43
L45:
    r100 = box(float, r94)
    r101 = [r91, r100]
    r102 = load_address r101
    r103 = _PyObject_Vectorcall(r98, r102, 2, 0)
    dec_ref r98
    if is_error(r103) goto L70 (error at main:75) else goto L71
L46:
    dec_ref r100
    r104 = 'Temperature max:'
    r105 = 'temp_max'
    r106 = CPyDict_GetItem(weather_data, r105)
    dec_ref weather_data
    if is_error(r106) goto L55 (error at main:76) else goto L47
L47:
    r107 = unbox(float, r106)
    dec_ref r106
    r108 = r107 == -113.0
    if r108 goto L49 else goto L48 :: bool
L48:
    r109 = builtins :: module
    r110 = 'print'
    r111 = CPyObject_GetAttr(r109, r110)
    if is_error(r111) goto L55 (error at main:76) else goto L50
L49:
    r112 = PyErr_Occurred()
    if not is_error(r112) goto L55 (error at main:76) else goto L48
L50:
    r113 = box(float, r107)
    r114 = [r104, r113]
    r115 = load_address r114
    r116 = _PyObject_Vectorcall(r111, r115, 2, 0)
    dec_ref r111
    if is_error(r116) goto L72 (error at main:76) else goto L73
L51:
    dec_ref r113
    goto L54
L52:
    r117 = 'City not found.'
    r118 = builtins :: module
    r119 = 'print'
    r120 = CPyObject_GetAttr(r118, r119)
    if is_error(r120) goto L55 (error at main:78) else goto L53
L53:
    r121 = [r117]
    r122 = load_address r121
    r123 = _PyObject_Vectorcall(r120, r122, 1, 0)
    dec_ref r120
    if is_error(r123) goto L55 (error at main:78) else goto L74
L54:
    return 1
L55:
    r124 = <error> :: None
    return r124
L56:
    dec_ref api_key
    goto L55
L57:
    dec_ref api_key
    dec_ref lat
    dec_ref lon
    goto L52
L58:
    dec_ref api_key
    dec_ref lat
    dec_ref lon
    goto L55
L59:
    dec_ref api_key
    dec_ref lon
    goto L55
L60:
    dec_ref weather_data
    goto L55
L61:
    dec_ref weather_data
    dec_ref feels_like_emoji
    dec_ref humidity_emoji
    dec_ref temp_emoji
    goto L55
L62:
    dec_ref weather_data
    dec_ref humidity_emoji
    dec_ref temp_emoji
    goto L55
L63:
    dec_ref weather_data
    dec_ref humidity_emoji
    dec_ref temp_emoji
    dec_ref r52
    goto L55
L64:
    dec_ref r58
    goto L27
L65:
    dec_ref weather_data
    dec_ref temp_emoji
    goto L55
L66:
    dec_ref weather_data
    dec_ref temp_emoji
    dec_ref r68
    goto L55
L67:
    dec_ref r74
    goto L34
L68:
    dec_ref weather_data
    dec_ref r84
    goto L55
L69:
    dec_ref r90
    goto L41
L70:
    dec_ref weather_data
    dec_ref r100
    goto L55
L71:
    dec_ref r103
    goto L46
L72:
    dec_ref r113
    goto L55
L73:
    dec_ref r116
    goto L51
L74:
    dec_ref r123
    goto L54

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4, r5 :: object
    r6 :: str
    r7 :: dict
    r8 :: object
    r9 :: object_ptr
    r10 :: object_ptr[1]
    r11 :: c_ptr
    r12 :: native_int[1]
    r13 :: c_ptr
    r14 :: object
    r15 :: dict
    r16, r17 :: str
    r18 :: bit
    r19 :: dict
    r20 :: str
    r21 :: object
    r22, r23 :: str
    r24 :: i32
    r25 :: bit
    r26 :: object
    r27, r28, r29 :: bit
    r30, r31 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L13 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = ('Any',)
    r6 = 'typing'
    r7 = main.globals :: static
    r8 = CPyImport_ImportFromMany(r6, r5, r5, r7)
    if is_error(r8) goto L13 (error at <module>:1) else goto L4
L4:
    typing = r8 :: module
    dec_ref r8
    r9 = load_address requests :: module
    r10 = [r9]
    r11 = load_address r10
    r12 = [2]
    r13 = load_address r12
    r14 = (('requests', 'requests', 'requests'),)
    r15 = main.globals :: static
    r16 = 'main.py'
    r17 = '<module>'
    r18 = CPyImport_ImportMany(r14, r11, r15, r16, r17, r13)
    if not r18 goto L13 else goto L5 :: bool
L5:
    r19 = main.globals :: static
    r20 = '__name__'
    r21 = CPyDict_GetItem(r19, r20)
    if is_error(r21) goto L13 (error at <module>:81) else goto L6
L6:
    r22 = cast(str, r21)
    if is_error(r22) goto L13 (error at <module>:81) else goto L7
L7:
    r23 = '__main__'
    r24 = PyUnicode_Compare(r22, r23)
    dec_ref r22
    r25 = r24 == -1
    if r25 goto L8 else goto L10 :: bool
L8:
    r26 = PyErr_Occurred()
    r27 = r26 != 0
    if r27 goto L9 else goto L10 :: bool
L9:
    r28 = CPy_KeepPropagating()
    if not r28 goto L13 (error at <module>:81) else goto L10 :: bool
L10:
    r29 = r24 == 0
    if r29 goto L11 else goto L12 :: bool
L11:
    r30 = main()
    if is_error(r30) goto L13 (error at <module>:82) else goto L12
L12:
    return 1
L13:
    r31 = <error> :: None
    return r31
